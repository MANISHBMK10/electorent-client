openapi: 3.0.0
info:
  version: 1.0.0
  title: Electorent Api
  description: REST api for Electorent
servers:
  - url: http://localhost:8000/api/
  - url: https://electorent-api.herokuapp.com/api/
tags:
  - name: Products
    description: Api to manage products
  - name: Users
    description: Api to manage users
  - name: Reviews
    description: Api to manage reviews
  - name: FAQ
    description: Api to manage faqs
  - name: Address
    description: Api to manage Delivery adderess of the user.
  - name: UPI
    description: Api to manage upi addresses of the user
  - name: DebitCards
    description: Api to manage debitCard of the user
  - name: Orders
    description: Api to manage orders placed by the user

paths:
  /product:
    get:
      summary: Gets the list of all products
      tags: [Products]
      responses:
        "200":
          description: list of products
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/products"
    post:
      summary: create a product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/products"
      responses:
        "201":
          description: created a product!
  /product/{productId}:
    get:
      summary: gets a single product
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          description: this is the product id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "200":
          description: searches the product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/products"
    patch:
      summary: updates the product
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          description: this is the product id ( auto generated by mongo)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/products"
      responses:
        "201":
          description: updated the product!
    delete:
      summary: deletes the product
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          description: this is the product id ( auto generated by mongo)
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/products"
      responses:
        "201":
          description: deleted the product!
  /product/category/{categoryName}:
    get:
      summary: gets all the products related to a particular category
      tags: [Products]
      parameters:
        - name: categoryName
          in: path
          required: true
          description: this is the name of the category that we want to search
          schema:
            type: string
      responses:
        "200":
          description: searches the product
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/products"
  /user:
    get:
      summary: gets all the Users
      tags: [Users]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/users"
    post:
      summary: create a user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
      responses:
        "201":
          description: created a user!
  /user/{userId}:
    get:
      summary: gets a single user
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          description: this is the user id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "200":
          description: searches the user based on the user id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"
    patch:
      summary: updates the user
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          description: this is the user id ( auto generated by mongo)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
      responses:
        "201":
          description: updated the user!
    delete:
      summary: deletes the user
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          description: this is the user id ( auto generated by mongo)
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/users"
      responses:
        "201":
          description: deleted the user!

  /review/{productId}:
    get:
      summary: Get the review for the ProductId
      tags: [Reviews]
      parameters:
        - name: productId
          in: path
          required: true
          description: This is the ProductId
          schema:
            type: string
      responses:
        "200":
          description: Getthe review based on the productid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reviews"
  /review:
    post:
      summary: post the Review of  the product id
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reviews"
      responses:
        "201":
          description: Created the review
  /review/{reviewId}:
    get:
      summary: Get the Review of based on the review id
      tags: [Reviews]
      parameters:
        - name: reviewId
          in: path
          required: true
          description: Get the Review based on the review ids
          schema:
            type: string
      responses:
        "200":
          description: Get the Reviews based on the review id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reviews"
    patch:
      summary: Update the review of the product id
      tags: [Reviews]
      parameters:
        - name: reviewId
          in: path
          required: true
          description: Review Id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reviews"
      responses:
        "201":
          description: Updated the Review
    delete:
      summary: delete the Review of that Product id
      tags: [Reviews]
      parameters:
        - name: reviewId
          in: path
          required: true
          description: review Id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reviews"
      responses:
        "201":
          description: Deleted the review of that product id

  /faq:
    post:
      summary: post the Faqs
      tags: [FAQ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/faq"
      responses:
        "201":
          description: post the Faqs

  /faq/{productId}:
    get:
      summary: get the Faq based on the product Id
      tags: [FAQ]
      parameters:
        - name: productId
          in: path
          required: true
          description: ProductId of the faq
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/faq"
      responses:
        "200":
          description: get the Faq of the product id
          content:

  /faq/{faqId}:
    get:
      summary: Get the Faqs based on the Faqs Id
      tags: [FAQ]
      parameters:
        - name: faqId
          in: path
          required: true
          description: faqs Id
      requestBody:
        required: true
      responses:
        "200":
          description: Get the faqs based on the faqs id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/faq"

    patch:
      summary: Update the Faqid
      tags: [FAQ]
      parameters:
        - name: faqId
          in: path
          required: true
          description: faqid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/faq"
      responses:
        "201":
          description: updated succesfully the faq

    delete:
      summary: Delete the Faq
      tags: [FAQ]
      parameters:
        - name: faqId
          in: path
          required: true
          description: Faqid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/faq"
      responses:
        "201":
          description: Successfully deleted the Faq based on  the id

  /address:
    post:
      summary: Creates a new address
      tags: [Address]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/address"
      responses:
        "201":
          description: created a user!

  /address/{userId}:
    get:
      summary: gets all Delivery addresses of given user
      tags: [Address]
      parameters:
        - name: userId
          in: path
          required: true
          description: this is the user id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "200":
          description: searches the user based on the user id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"

  /address/{addressId}:
    patch:
      summary: updates the address
      tags: [Address]
      parameters:
        - name: addressId
          in: path
          required: true
          description: this is the address id ( auto generated by mongo)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/address"
      responses:
        "201":
          description: updated the adderess!

    delete:
      summary: deletes the address
      tags: [Address]
      parameters:
        - name: addressId
          in: path
          required: true
          description: this is the address id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "201":
          description: deleted the address!

  /upi:
    get:
      summary: Gets the list of all the UPI
      tags: [UPI]
      responses:
        "200":
          description: list of the UPI
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/upi"

    post:
      summary: Creates a new UPI
      tags: [UPI]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/upi"
      responses:
        "201":
          description: created a UPI!

  /upi/{upiId}:
    patch:
      summary: updates the UPI
      tags: [UPI]
      parameters:
        - name: upiId
          in: path
          required: true
          description: this is the UPI id ( auto generated by mongo)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/upi"
      responses:
        "201":
          description: updated the UPI!

    delete:
      summary: deletes the UPI
      tags: [UPI]
      parameters:
        - name: upiId
          in: path
          required: true
          description: this is the upiId id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "201":
          description: deleted the upi!
  /upi/user/{userId}:
    get:
      summary: Gets the list of all the UPIs of user
      tags: [UPI]
      parameters:
        - name: userId
          in: path
          required: true
          description: this is the user id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "200":
          description: list of the UPI
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/upi"
  /debitcard:
    get:
      summary: Gets the list of all debitCards
      tags: [DebitCards]
      responses:
        "200":
          description: list of debit cards
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/debitCards"

    post:
      summary: Creates a new DebitCard
      tags: [DebitCards]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/debitCards"
      responses:
        "201":
          description: created a debit card!

  /debitcard/user/{userId}:
    get:
      summary: Gets the list of all Debit Cards
      tags: [DebitCards]
      parameters:
        - name: userId
          in: path
          required: true
          description: this is the debit card id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "200":
          description: list of debit cards
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/debitCards"

  /debitcard/{debitCardId}:
    patch:
      summary: updates the Debit card
      tags: [DebitCards]
      parameters:
        - name: debitCardId
          in: path
          required: true
          description: this is the debit card id ( auto generated by mongo)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/debitCards"
      responses:
        "201":
          description: updated the debit card!

    delete:
      summary: deletes the debit card
      tags: [DebitCards]
      parameters:
        - name: debitCardId
          in: path
          required: true
          description: this is the debit card id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "201":
          description: deleted the debit card!

  /orders:
    post:
      summary: Creates a new order
      tags: [Orders]
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orders"
      responses:
        "201":
          description: created a user!

  /orders/{userId}:
    get:
      summary: Gets the list of all orders by a user
      tags: [Orders]
      parameters:
        - name: userId
          in: path
          required: true
          description: this is the user id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "200":
          description: list of all orders
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/orders"

  /orders/{orderId}:
    patch:
      summary: updates the order details
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          description: this is the order id ( auto generated by mongo)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orders"
      responses:
        "201":
          description: updated the order!

    delete:
      summary: deletes the product
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          description: this is the order id ( auto generated by mongo)
          schema:
            type: string
      responses:
        "201":
          description: deleted the order!
components:
  schemas:
    products:
      type: object
      required:
        - productName
        - price
        - description
        - image
        - type
        - category
        - quantity
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        productName:
          type: string
          description: name of the productName
        price:
          type: integer
          description: price of the product
        discount:
          type: integer
          description: discount offered for the product
        description:
          type: description of the product
          description: this describes features of the product
        image:
          type: file
          description: image for the product
        rating:
          rate:
            type: integer
            description: rating of the product
          count:
            type: integer
            description: number of reviews for the product
        type:
          type: string
          description: tells whether the product is rent/buy
        category:
          type: string
          description: describe the category products belongs to
        quantity:
          type: integer
          description: stock availability
      example:
        productName: Attitude is Everything (Paperback)
        price: 487
        discount: 12
        description: Do you dread going to work? Do you feel tired, unhappy, weighed down? Have you given up on your dreams? The road to a happier, more successful life starts with your attitude--and your attitude is within your control.Whether your outlook is negative, positive or somewhere in between, Jeff Keller, motivational speaker and coach, will show you how to take control and unleash your hidden potential through three powerful steps
        image:
          [
            "https://images-eu.ssl-images-amazon.com/images/I/41F8ATXoMOL._SY264_BO1,204,203,200_QL40_FMwebp_.jpg",
          ]
        type: Buy
        rating: { rate: 0, count: 0 }
        category: "Books"
        quantity: 13
    users:
      type: object
      required:
        - userName
        - fullName
        - password
        - email
        - mobileNumber
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        userName:
          type: string
          description: username of the user
        fullName:
          type: string
          description: fullname of the user
        password:
          type: string
          description: password of the user
        email:
          type: string
          description: email of the user (unique)
        mobileNumber:
          type: string
          description: mobile number of the user
        panNumber:
          type: string
          description: pancard of the user
        dob:
          type: string
          description: date of birth of the user
        avatar:
          type: string
          description: profile pic of the user
        deliveryAddress:
          type: string
          description: delivery address of the user
        debitCards:
          type: string
          description: debit card details of the user
        upi:
          type: string
          description: upi addresses o the user for the payments
        myOrders:
          type: string
          description: orders of the user
        cart:
          type: string
          description: contains the products which were added to the cart by the user
      example:
        userName: ravi123
        fullName: Putin12
        password: Test@123
        email: putin.t19@iiits.in
        dob: "2022-01-21"
        avatar: https://cdn-icons-png.flaticon.com/128/1177/1177568.png
        mobileNumber: "6300014049"
    reviews:
      type: object
      required:
        - productId
        - userId
        - rating
        - heading
        - body
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        productId:
          type: string
          description: contains the id of the product for which it was given a review
        userId:
          type: string
          description: contains the id of the user who gave a review
        rating:
          type: integer
          description: rating of the review
        heading:
          type: string
          description: heading of the review
        body:
          type: string
          description: description of the review
      example:
        productId: 6207ece26728faf81505bfab
        userId: 6217bd46a55a38f1f0f0dc12
        rating: 3
        heading: Very nice product
        body: Too good fully satisfied
    faq:
      type: object
      required:
        - productId
        - question
        - answer
        - upvotes
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        productId:
          type: string
          description: contains the id of the product for which question was asked about
        question:
          type: string
          description: this is the question/query on the product
        answer:
          type: string
          description: this is the answer for the question
        upvotes:
          type: integer
          description: number of upvotes for the FAQ
      example:
        productId: 6207ece26728faf81505bfab
        question: Will this support canon EF 50mm lens?
        answer: Yes it support 50 mm lens
        upvotes: 1

    address:
      type: object
      required:
        - userId
        - userName
        - mobileNumber
        - address
        - locationName
        - pincode
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        userId:
          type: string
          description: contains the id of the user
        userName:
          type: string
          description: name of the user
        mobileNumber:
          type: string
          description: mobile number for the delivery adderess
        address:
          type: string
          description: address for the delivery location
        locationName:
          type: string
          description: name of the landmark, location specefic details
        pincode:
          type: string
          description: pincode of the address
      example:
        userId: "6241f03cfae38ce4a063e0ff"
        userName: ravi123
        mobileNumber: 9878494698
        address: Boys Hostel Indian Institute of Information Technology
        locationName: Room No 125
        pincode: 515464

    debitCards:
      type: object
      required:
        - userId
        - avatar
        - cardType
        - cardNo
        - cvv
        - expiry
        - nameOnCard
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        avatar:
          type: string
          description: has the link to the avatar of the card
        userId:
          type: string
          description: has the id of the user for whom we want the debitCards
        cardType:
          type: string
          description: has the type of the debit card
        cardNo:
          type: string
          description: has the card number of that particular card
        cvv:
          type: number
          description: has the cvv details of the card
        expiry:
          type: string
          description: has the expiry date of the card
        nameOnCard:
          type: string
          description: has the official name on the card.
      example:
        userId: 6217bd46a55a38f1f0f0dc12
        cardType: Bajaj finance
        avatar: image
        cardNo: 123456789
        cvv: 048
        expiry: 04/2022
        nameOnCard: Ravindra tolchuru

    upi:
      type: object
      required:
        - userId
        - avatar
        - upiType
        - cardNo
        - mobileNumber
        - userName
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        avatar:
          type: string
          description: has the link to the avatar of the UPI
        userId:
          type: string
          description: has the id of the user for whom we want the UPI
        upiType:
          type: string
          description: has the type of the UPI
        cardNo:
          type: number
          description: has the card number of that particular UPI
        mobileNumber:
          type: number
          description: has the mobile number related to the UPI
        userName:
          type: string
          description: has the official name on the UPI.
      example:
        userId: 6217bd46a55a38f1f0f0dc12
        upiType: Phone Pe
        avatar: image
        cardNo: 123456789
        mobileNumber: 9874561230
        userName: Ravindra tolchuru

    orders:
      type: object
      required:
        - userId
        - productId
        - qty
        - orderedOn
        - status
        - deliveredOn
      properties:
        id:
          type: string
          description: id is auto-generated by mongodb
        productId:
          type: string
          description: has the id of the product ordered
        userId:
          type: string
          description: has the id of the user for whom we want the UPI
        qty:
          type: number
          description: has the number ordered
        orderedOn:
          type: string
          description: has the date on which it is ordered
        status:
          type: string
          description: has the current status of the product
        deliveredOn:
          type: string
          description: has the date it is delivered on
      example:
        userId: 6217bd46a55a38f1f0f0dc12
        productId: 6245e1e0a2eebf9585be893d
        qty: 5
        orderedOn: 02-2022
        status: Delivered
        deliveredOn: 03-2022
